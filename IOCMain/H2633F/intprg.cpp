/***********************************************************************/
/*                                                                     */
/*  FILE        :intprg.cpp                                            */
/*  DATE        :Wed, Sep 18, 2002                                     */
/*  DESCRIPTION :Interrupt Program                                     */
/*  CPU TYPE    :H8S/2633F                                             */
/*                                                                     */
/*  This file is generated by Hitachi Project Generator (Ver.1.1).     */
/*                                                                     */
/***********************************************************************/
                  


#include    <machine.h>
#include 	"CodeOpt.h"
#include    "vect.h"          
#include 	"sci.h"
#include	"rtc.h"
#include	"PTPIsr.h"

#pragma section IntPRG

#pragma asm
		.IMPORT		_K_OS_Intrp_Entry  
		.IMPORT		_K_OS_Intrp_Exit 
		.IMPORT		_RTOS_TICK
		.IMPORT		_sci3_rxd
		.IMPORT		_sci3_txd
		.IMPORT		_sci3_txd_idle
		.IMPORT		_sci4_rxd_error
		.IMPORT		_sci4_rxd
		.IMPORT		_sci4_txd
		.IMPORT		_sci4_txd_idle
		
#pragma endasm

#if 0
#pragma asm
		.IMPORT		_sci3_rxd_error
		.IMPORT		_sci4_rxd_error
#pragma endasm
#endif

//  vector 2 Reserved

//  vector 3 Reserved

//  vector 4 Reserved

//  vector 5 Treace
void    INT_Treace(void) {/* sleep(); */}
//  vector 6 Direct Transition
void    INT_Direct_Transition(void) {/* sleep(); */}
//  vector 7 NMI 
void    INT_NMI(void) {/* sleep(); */}
//  vector 8 User breakpoint trap
void    INT_TRAP1(void) {/* sleep(); */}
//  vector 9 User breakpoint trap
void    INT_TRAP2(void) {/* sleep(); */}
//  vector 10 User breakpoint trap
void    INT_TRAP3(void) {/* sleep(); */}
//  vector 11 User breakpoint trap
void    INT_TRAP4(void) {  /* sleep(); */}
//  vector 12 Reserved

//  vector 13 Reserved

//  vector 14 Reserved

//  vector 15 Reserved

//  vector 16 External trap IRQ0
void    INT_IRQ0(void) {/* sleep(); */}
//  vector 17 External trap IRQ1
void    INT_IRQ1(void) {/* sleep(); */}
//  vector 18 External trap IRQ2
void    INT_IRQ2(void) {/* sleep(); */}
//  vector 19 External trap IRQ3
void    INT_IRQ3(void) {/* sleep(); */}
//  vector 20 External trap IRQ4
#if 0
void    INT_IRQ4(void) {/* sleep(); */}
#else
#pragma asm
		.IMPORT _isr_fpga1
		.EXPORT _INT_IRQ4
_INT_IRQ4:
        JSR         @_K_OS_Intrp_Entry:24
        JSR         @_isr_fpga1:24
        JSR         @_K_OS_Intrp_Exit:24
        RTE
#pragma endasm
#endif

//  vector 21 External trap IRQ5
void    INT_IRQ5(void) {/* sleep(); */}

//  vector 22 External trap IRQ6
#if 0
void    INT_IRQ6(void) {/* sleep(); */}
#else
#pragma asm
		.IMPORT _isr_fpga2
		.EXPORT _INT_IRQ6
_INT_IRQ6:
        JSR         @_K_OS_Intrp_Entry:24
        JSR         @_isr_fpga2:24
        JSR         @_K_OS_Intrp_Exit:24
        RTE
#pragma endasm
#endif

//  vector 23 External trap IRQ7
void    INT_IRQ7(void) {/* sleep(); */}
//  vector 24 SWDTEND DTC
void    INT_SWDTEND_DTC(void) {/* sleep(); */}
//  vector 25 WOVI0 
void    INT_WOVI0(void) {/* sleep(); */}
//  vector 26 CMI
void    INT_CMI(void) {/* sleep(); */}
//  vector 27 PC Break
void    INT_PC_Break(void) {/* sleep(); */}
//  vector 28 ADI
#if 0
void    INT_ADI(void) {/* sleep(); */}
#else
//EXTERN void isr_adc(void)
#pragma asm
		.IMPORT		_isr_adc   
		.EXPORT		_INT_ADI
_INT_ADI:
        JSR         @_K_OS_Intrp_Entry:24
        JSR         @_isr_adc:24
        JSR         @_K_OS_Intrp_Exit:24
        RTE
#pragma endasm
#endif

//  vector 29 WOVI1
void    INT_WOVI1(void) {/* sleep(); */}
//  vector 30 Reserved

//  vector 31 Reserved

//  vector 32 TGI0A TPU0
void    INT_TGI0A_TPU0(void) {/* sleep(); */}
//  vector 33 TGI0B TPU0
void    INT_TGI0B_TPU0(void) {/* sleep(); */}
//  vector 34 TGI0C TPU0
void    INT_TGI0C_TPU0(void) {/* sleep(); */}
//  vector 35 TGI0D TPU0
void    INT_TGI0D_TPU0(void) {/* sleep(); */}
//  vector 36 TCI0V TPU0
void    INT_TCI0V_TPU0(void) {/* sleep(); */}
//  vector 37 Reserved

//  vector 38 Reserved

//  vector 39 Reserved

//  vector 40 TGI1A TPU1
void    INT_TGI1A_TPU1(void) {/* sleep(); */}
//  vector 41 TGI1B TPU1
void    INT_TGI1B_TPU1(void) {/* sleep(); */}
//  vector 42 TCI1V TPU1
void    INT_TCI1V_TPU1(void) {/* sleep(); */}
//  vector 43 TCI1U TPU1
void    INT_TCI1U_TPU1(void) {/* sleep(); */}
//  vector 44 TGI2A TPU2
void    INT_TGI2A_TPU2(void) {/* sleep(); */}
//  vector 45 TGI2B TPU2
void    INT_TGI2B_TPU2(void) {/* sleep(); */}
//  vector 46 TCI2V TPU2
void    INT_TCI2V_TPU2(void) {/* sleep(); */}
//  vector 47 TCI2U TPU2
void    INT_TCI2U_TPU2(void) {/* sleep(); */}
//  vector 48 TGI3A TPU3
void    INT_TGI3A_TPU3(void) {/* sleep(); */}
//  vector 49 TGI3B TPU3
void    INT_TGI3B_TPU3(void) {/* sleep(); */}
//  vector 50 TGI3C TPU3
void    INT_TGI3C_TPU3(void) {/* sleep(); */}
//  vector 51 TGI3D TPU3
void    INT_TGI3D_TPU3(void) {/* sleep(); */}
//  vector 52 TCI3V TPU3
void    INT_TCI3V_TPU3(void) {/* sleep(); */}
//  vector 53 Reserved

//  vector 54 Reserved

//  vector 55 Reserved

//  vector 56 TGI4A TPU4
void    INT_TGI4A_TPU4(void) {/* sleep(); */}
//  vector 57 TGI4B TPU4
void    INT_TGI4B_TPU4(void) {/* sleep(); */}
//  vector 58 TCI4V TPU4
void    INT_TCI4V_TPU4(void) {/* sleep(); */}
//  vector 59 TCI4U TPU4
void    INT_TCI4U_TPU4(void) {/* sleep(); */}
//  vector 60 TGI5A TPU5
void    INT_TGI5A_TPU5(void) {/* sleep(); */}
//  vector 61 TGI5B TPU5
void    INT_TGI5B_TPU5(void) {/* sleep(); */}
//  vector 62 TCI5V TPU5
void    INT_TCI5V_TPU5(void) {/* sleep(); */}
//  vector 63 TCI5U TPU5
void    INT_TCI5U_TPU5(void) {/* sleep(); */}
//  vector 64 CMIA0A
//void    INT_CMIA0A(void) { } 

#if 1
#pragma asm
		.EXPORT		_INT_CMIA0A
_INT_CMIA0A:
        JSR         @_K_OS_Intrp_Entry:24
        JSR         @_RTOS_TICK:24
        JSR         @_K_OS_Intrp_Exit:24
        RTE
#pragma endasm
#endif

#if 0
void    INT_CMIA0A(void) 
{	
	K_OS_Intrp_Entry();
	RTOS_TICK(); 
	K_OS_Intrp_Exit();
	/* sleep(); */
}
#endif

//  vector 65 CMIB0A 
// extern volatile unsigned long g_systemTicks;
void    INT_CMIB0A(void) { /*g_systemTicks++; */ /* sleep(); */}
//  vector 66 OVI0A
void    INT_OVI0A(void) {/* sleep(); */}
//  vector 67 Reserved

//  vector 68 CMIA1A
void    INT_CMIA1A(void) {/* sleep(); */}
//  vector 69 CMIB1A
void    INT_CMIB1A(void) {/* sleep(); */}
//  vector 70 OVI1A
void    INT_OVI1A(void) {/* sleep(); */}
//  vector 71 Reserved

//  vector 72 DEND0A
void    INT_DEND0A(void) {/* sleep(); */}
//  vector 73 DEND0B
void    INT_DEND0B(void) {/* sleep(); */}
//  vector 74 DEND1A
void    INT_DEND1A(void) {/* sleep(); */}
//  vector 75 DEND1B
void    INT_DEND1B(void) {/* sleep(); */}
//  vector 76 Reserved

//  vector 77 Reserved

//  vector 78 Reserved

//  vector 79 Reserved

//  vector 80 ERI0 SCI0
#if 0
void    INT_ERI0_SCI0(void) { sci0_rxd_error(); /* sleep(); */}
#else
#pragma asm
		.IMPORT		_sci0_rxd_error
		.EXPORT		_INT_ERI0_SCI0
_INT_ERI0_SCI0:			
        JSR         @_K_OS_Intrp_Entry:24
        JSR         @_sci0_rxd_error:24
        JSR         @_K_OS_Intrp_Exit:24
        RTE
#pragma endasm
#endif
		
//  vector 81 RXI0 SCI0
//void    INT_RXI0_SCI0(void) { sci0_rxd(); /* sleep(); */}
#pragma asm
		.IMPORT		_sci0_rxd
		.EXPORT		_INT_RXI0_SCI0
_INT_RXI0_SCI0:			
        JSR         @_K_OS_Intrp_Entry:24
        JSR         @_sci0_rxd:24
        JSR         @_K_OS_Intrp_Exit:24
        RTE
#pragma endasm
		

//  vector 82 TXI0 SCI0
// void    INT_TXI0_SCI0(void) { sci0_txd(); /* sleep(); */}
#pragma asm
		.IMPORT		_sci0_txd
		.EXPORT		_INT_TXI0_SCI0
_INT_TXI0_SCI0:			
        JSR         @_K_OS_Intrp_Entry:24
        JSR         @_sci0_txd:24
        JSR         @_K_OS_Intrp_Exit:24
        RTE
#pragma endasm

		
//  vector 83 TEI0 SCI0
// void    INT_TEI0_SCI0(void) { sci0_txd_idle(); /* sleep(); */}
#pragma asm
		.IMPORT		_sci0_txd_idle
		.EXPORT		_INT_TEI0_SCI0
_INT_TEI0_SCI0:			
        JSR         @_K_OS_Intrp_Entry:24
        JSR         @_sci0_txd_idle:24
        JSR         @_K_OS_Intrp_Exit:24
        RTE
#pragma endasm

//  vector 84 ERI1 SCI1
//void    INT_ERI1_SCI1(void) { sci1_rxd_error(); /* sleep(); */}
#if FAKE_SCI3
#pragma asm
		.IMPORT		_sci1_rxd_error
		.EXPORT		_INT_ERI1_SCI1
_INT_ERI1_SCI1:			
        JSR         @_K_OS_Intrp_Entry:24
        JSR         @_sci3_rxd_error:24
        JSR         @_K_OS_Intrp_Exit:24
        RTE
#pragma endasm
#elif 0 
void    INT_ERI1_SCI1(void) { sci1_rxd_error(); /* sleep(); */}
#else
#pragma asm
		.IMPORT		_sci1_rxd_error
		.EXPORT		_INT_ERI1_SCI1
_INT_ERI1_SCI1:			
        JSR         @_K_OS_Intrp_Entry:24
        JSR         @_sci1_rxd_error:24
        JSR         @_K_OS_Intrp_Exit:24
        RTE
#pragma endasm
#endif
		
//  vector 85 RXI1 SCI1
// void    INT_RXI1_SCI1(void) { sci1_rxd(); /* sleep(); */}
#if FAKE_SCI3
#pragma asm
		.IMPORT		_sci1_rxd
		.EXPORT		_INT_RXI1_SCI1
_INT_RXI1_SCI1:			
        JSR         @_K_OS_Intrp_Entry:24
        JSR         @_sci3_rxd:24
        JSR         @_K_OS_Intrp_Exit:24
        RTE
#pragma endasm
#else 
#pragma asm
		.IMPORT		_sci1_rxd
		.EXPORT		_INT_RXI1_SCI1
_INT_RXI1_SCI1:			
        JSR         @_K_OS_Intrp_Entry:24
        JSR         @_sci1_rxd:24
        JSR         @_K_OS_Intrp_Exit:24
        RTE
#pragma endasm
#endif
		
//  vector 86 TXI1 SCI1
// void    INT_TXI1_SCI1(void) { sci1_txd(); /* sleep(); */}
#if FAKE_SCI3
#pragma asm
		.IMPORT		_sci1_txd
		.EXPORT		_INT_TXI1_SCI1
_INT_TXI1_SCI1:			
        JSR         @_K_OS_Intrp_Entry:24
        JSR         @_sci3_txd:24
        JSR         @_K_OS_Intrp_Exit:24
        RTE
#pragma endasm
#else
#pragma asm
		.IMPORT		_sci1_txd
		.EXPORT		_INT_TXI1_SCI1
_INT_TXI1_SCI1:			
        JSR         @_K_OS_Intrp_Entry:24
        JSR         @_sci1_txd:24
        JSR         @_K_OS_Intrp_Exit:24
        RTE
#pragma endasm        
#endif                    

//  vector 87 TEI1 SCI1
//void    INT_TEI1_SCI1(void) { sci1_txd_idle(); /* sleep(); */}
#if FAKE_SCI3
#pragma asm
		.IMPORT		_sci1_txd_idle
		.EXPORT		_INT_TEI1_SCI1
_INT_TEI1_SCI1:			
        JSR         @_K_OS_Intrp_Entry:24
        JSR         @_sci3_txd_idle:24
        JSR         @_K_OS_Intrp_Exit:24
        RTE
#pragma endasm
#else
#pragma asm
		.IMPORT		_sci1_txd_idle
		.EXPORT		_INT_TEI1_SCI1
_INT_TEI1_SCI1:			
        JSR         @_K_OS_Intrp_Entry:24
        JSR         @_sci1_txd_idle:24
        JSR         @_K_OS_Intrp_Exit:24
        RTE
#pragma endasm
#endif

//  vector 88 ERI2 SCI2
void    INT_ERI2_SCI2(void) {/* sleep(); */}
//  vector 89 RXI2 SCI2
void    INT_RXI2_SCI2(void) {/* sleep(); */}
//  vector 90 TXI2 SCI2
void    INT_TXI2_SCI2(void) {/* sleep(); */}
//  vector 91 TEI2 SCI2
void    INT_TEI2_SCI2(void) {/* sleep(); */}
//  vector 92 CMIA0B
void    INT_CMIA0B(void) {/* sleep(); */}
//  vector 93 CMIB0B
void    INT_CMIB0B(void) {/* sleep(); */}
//  vector 94 OVI0B
void    INT_OVI0B(void) {/* sleep(); */}
//  vector 95 Reserved

//  vector 96 CMIA1B
// void    INT_CMIA1B(void) {/* sleep(); */}   

#pragma asm
		.EXPORT		_INT_CMIA1B
_INT_CMIA1B:
        JSR         @_K_OS_Intrp_Entry:24
        JSR         @_RTOS_TICK:24
        JSR         @_K_OS_Intrp_Exit:24
        RTE
#pragma endasm

#if 0
void    INT_CMIA1B(void) 
{	
	K_OS_Intrp_Entry();
	RTOS_TICK(); 
	K_OS_Intrp_Exit();
	/* sleep(); */
}
#endif

//  vector 97 CMIB1B
void    INT_CMIB1B(void) {/* sleep(); */}
//  vector 98 OVI1B
void    INT_OVI1B(void) {/* sleep(); */}
//  vector 99 Reserved

//  vector 100 IICI0
void    INT_IICI0(void) {/* sleep(); */}
//  vector 101 DDCSWI
void    INT_DDCSWI(void) {/* sleep(); */}
//  vector 102 IICI1
void    INT_IICI1(void) {/* sleep(); */}
//  vector 103 Reserved

//  vector 104 Reserved

//  vector 105 Reserved

//  vector 106 Reserved

//  vector 107 Reserved

//  vector 108 Reserved

//  vector 109 Reserved

//  vector 110 Reserved

//  vector 111 Reserved

//  vector 112 Reserved

//  vector 113 Reserved

//  vector 114 Reserved

//  vector 115 Reserved

//  vector 116 Reserved

//  vector 117 Reserved

//  vector 118 Reserved

//  vector 119 Reserved

//  vector 120 ERI3 SCI3
#if 0
void    INT_ERI3_SCI3(void) { sci3_rxd_error(); /* sleep(); */}
#else
#pragma asm
		.IMPORT		_sci3_rxd_error
		.EXPORT		_INT_ERI3_SCI3
_INT_ERI3_SCI3:			
        JSR         @_K_OS_Intrp_Entry:24
        JSR         @_sci3_rxd_error:24
        JSR         @_K_OS_Intrp_Exit:24
        RTE
#pragma endasm
#endif

//  vector 121 RXI3 SCI3
// void    INT_RXI3_SCI3(void) {/* sleep(); */}
#pragma asm
		.EXPORT		_INT_RXI3_SCI3
_INT_RXI3_SCI3:			
        JSR         @_K_OS_Intrp_Entry:24
        JSR         @_sci3_rxd:24
        JSR         @_K_OS_Intrp_Exit:24
        RTE
#pragma endasm

//  vector 122 TXI3 SCI3
// void    INT_TXI3_SCI3(void) {/* sleep(); */}
#pragma asm
		.EXPORT		_INT_TXI3_SCI3
_INT_TXI3_SCI3:			
        JSR         @_K_OS_Intrp_Entry:24
        JSR         @_sci3_txd:24
        JSR         @_K_OS_Intrp_Exit:24
        RTE
#pragma endasm

		
//  vector 123 TEI3 SCI3
// void    INT_TEI3_SCI3(void) {/* sleep(); */}
#pragma asm
		.EXPORT		_INT_TEI3_SCI3
_INT_TEI3_SCI3:			
        JSR         @_K_OS_Intrp_Entry:24
        JSR         @_sci3_txd_idle:24
        JSR         @_K_OS_Intrp_Exit:24
        RTE
#pragma endasm

//  vector 124 ERI4 SCI4
#if 0
void    INT_ERI4_SCI4(void) {sci4_rxd_error(); /* sleep(); */}
#else
#pragma asm
		.EXPORT		_INT_ERI4_SCI4
_INT_ERI4_SCI4:			
        JSR         @_K_OS_Intrp_Entry:24
        JSR         @_sci4_rxd_error:24
        JSR         @_K_OS_Intrp_Exit:24
        RTE
#pragma endasm
#endif

//  vector 125 RXI4 SCI4
// void    INT_RXI4_SCI4(void) {/* sleep(); */}
#pragma asm
		.EXPORT		_INT_RXI4_SCI4
_INT_RXI4_SCI4:			
        JSR         @_K_OS_Intrp_Entry:24
        JSR         @_sci4_rxd:24
        JSR         @_K_OS_Intrp_Exit:24
        RTE
#pragma endasm

//  vector 126 TXI4 SCI4
// void    INT_TXI4_SCI4(void) {/* sleep(); */}
#pragma asm
		.EXPORT		_INT_TXI4_SCI4
_INT_TXI4_SCI4:			
        JSR         @_K_OS_Intrp_Entry:24
        JSR         @_sci4_txd:24
        JSR         @_K_OS_Intrp_Exit:24
        RTE
#pragma endasm

//  vector 127 TEI4 SCI4
// void    INT_TEI4_SCI4(void) {/* sleep(); */}
#pragma asm
		.EXPORT		_INT_TEI4_SCI4
_INT_TEI4_SCI4:			
        JSR         @_K_OS_Intrp_Entry:24
        JSR         @_sci4_txd_idle:24
        JSR         @_K_OS_Intrp_Exit:24
        RTE
#pragma endasm


//  vector Dummy
void    Dummy(void) {/* sleep(); */}

